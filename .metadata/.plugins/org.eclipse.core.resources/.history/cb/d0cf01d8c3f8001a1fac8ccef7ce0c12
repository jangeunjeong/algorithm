package day0917;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;

public class Solution {

	static int N, M;
	static char[][] map;
	static boolean[][] d_visit, s_visit;
	static Queue<Point> dq, sq;
	static int[][] dir = { { 1, 0 }, { 0, 1 }, { -1, 0 }, { 0, -1 } };

	static class Point {
		int x, y;

		public Point(int x, int y) {
			super();
			this.x = x;
			this.y = y;
		}

	}

	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int T = Integer.parseInt(br.readLine());
		for (int tc = 1; tc <= T; tc++) {
			String[] input = br.readLine().split(" ");
			N = Integer.parseInt(input[0]);
			M = Integer.parseInt(input[1]);

			map = new char[N][M];
			d_visit = new boolean[N][M];
			s_visit = new boolean[N][M];
			dq = new LinkedList<Solution.Point>();
			sq = new LinkedList<Solution.Point>();

			Point end;

			boolean findD = false, findS = false;
			for (int i = 0; i < N; i++) {
				map[i] = br.readLine().toCharArray();
				if (!findD || !findS) {
					for (int j = 0; j < M; j++) {
						if (map[i][j] == 'D') {
							dq.add(new Point(i, j));
							d_visit = true;
							findD = true;
						} else if (map[i][j] == 'S') {

						} else if (map[i][j] == '*') {

						}
					}
				}
			}

			while (!sq.isEmpty()) {

			}
		}
	}
}
